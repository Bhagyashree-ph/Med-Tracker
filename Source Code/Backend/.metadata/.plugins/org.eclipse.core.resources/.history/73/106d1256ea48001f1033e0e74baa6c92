package com.medtracker.provider.service.impl;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;

import com.medtracker.provider.entities.DoctorEO;
import com.medtracker.provider.entities.HospitalEO;
import com.medtracker.provider.entities.MedicationDetailEO;
import com.medtracker.provider.entities.PatientEO;
import com.medtracker.provider.entities.PharmacieSEO;
import com.medtracker.provider.entities.PrescMedMappingEO;
import com.medtracker.provider.entities.PrescriptionDetailEO;
import com.medtracker.provider.entities.RefillRequestEO;
import com.medtracker.provider.entities.RemainderEO;
import com.medtracker.provider.entities.UserEO;
import com.medtracker.provider.repositories.DoctorRepository;
import com.medtracker.provider.repositories.HospitalRepository;
import com.medtracker.provider.repositories.MedicationRepository;
import com.medtracker.provider.repositories.PatientRepository;
import com.medtracker.provider.repositories.PharmacyRepository;
import com.medtracker.provider.repositories.PrescMedMappingRepository;
import com.medtracker.provider.repositories.PrescriptionRepository;
import com.medtracker.provider.repositories.RefillRequestRepository;
import com.medtracker.provider.repositories.ReminderRepository;
import com.medtracker.provider.repositories.UserRepository;
import com.medtracker.provider.service.ProviderService;

@Service
public class ProviderServiceImpl implements ProviderService {

	@Autowired
	private PatientRepository patientRepo;

	@Autowired
	private UserRepository userRepo;

	@Autowired
	private PrescMedMappingRepository prescMedRepo;

	@Autowired
	private PrescriptionRepository prescRepo;

	@Autowired
	private MedicationRepository medRepo;

	@Autowired
	private HospitalRepository hospitalRepo;

	@Autowired
	private DoctorRepository drRepo;

	@Autowired
	private PharmacyRepository pharmRepo;

	@Autowired
	private RefillRequestRepository refillRepo;

	@Autowired
	private ReminderRepository remRepo;

	@Autowired
	private PlatformTransactionManager transactionManager;

	public String getPatientId(String firstName, String lastName) {
		java.util.Date currentDate = new java.util.Date();
		String day = String.format("%02d", currentDate.getDate());
		String month = String.format("%02d", currentDate.getMonth() + 1);
		String year = String.valueOf(currentDate.getYear() % 100);
		String hour = String.format("%02d", currentDate.getHours());
		String minute = String.format("%02d", currentDate.getMinutes());
		String patientId = firstName.substring(0, 1).toUpperCase() + lastName.substring(0, 1).toUpperCase() + day
				+ month + year + hour + minute;
		return patientId;
	}

	public PatientEO addPatient(PatientEO patientEO) {
		String patientId = getPatientId(patientEO.getFirstName(), patientEO.getLastName());
		patientEO.setPatientId(patientId);
		if (patientEO.getUser() != null) {
			UserEO user = userRepo.save(patientEO.getUser());
			if (user != null) {
				patientEO.setUser(user);
				return patientRepo.save(patientEO);
			} else {
				return null;
			}
		} else {
			return null;
		}
	}

	public byte[] convertImageToByteArray(String image) throws Exception {
		BufferedImage bImage = ImageIO.read(new File(image));
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		ImageIO.write(bImage, "jpg", bos);
		return bos.toByteArray();
	}

	@Override
	public List<PatientEO> fetchAllPatients() {
		List<PatientEO> patients = patientRepo.findAll();
		System.out.println("Service : " + patients);
		return patients;
	}

	@Override
	public List<PrescMedMappingEO> fetchPatientDetailsById(String patientID) {
		List<PrescMedMappingEO> prescMed = prescMedRepo.findByPatientId(patientID);
		for (PrescMedMappingEO prescMedMappingEO : prescMed) {
			System.out.println("Patient in Service : " + prescMedMappingEO);
		}
		return prescMed;
	}

	@Override
	public List<PrescMedMappingEO> addPrescriptionAndMedication(List<PrescMedMappingEO> preMeds) {
		List<PrescMedMappingEO> returnedPreMeds = null;
		PrescriptionDetailEO presc = null;
		if(preMeds.get(0).getPrescriptionDetails() != null){
			PrescriptionDetailEO prescDetails = preMeds.get(0).getPrescriptionDetails();
			if(prescDetails.getPatient() != null) {
				PatientEO patient = addPatient(prescDetails.getPatient());
				prescDetails.setPatient(patient);
				presc = prescRepo.save(presc);
			}
			
			for (PrescMedMappingEO prescMedMappingEO : returnedPreMeds) {
				TransactionDefinition transactionDefinition = new
				DefaultTransactionDefinition();
				TransactionStatus status = transactionManager.getTransaction(transactionDefinition);
				try{
					prescMedMappingEO.setPrescriptionDetails(presc);
					if (prescMedMappingEO.getMedicationDetails() != null) {
						med = medRepo.save(prescMedMappingEO.getMedicationDetails());
						prescMedMappingEO.setMedicationDetails(med);
						PrescMedMappingEO preMed = prescMedRepo.save(prescMedMappingEO);
						if (preMed != null) {
							returnedPreMeds.add(preMed);
							 transactionManager.commit(status);
						} else {
							transactionManager.rollback(status);
							returnedPreMeds.add(new PrescMedMappingEO());
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
					transactionManager.rollback(status);
				}
			}
		}
		return returnedPreMeds;
	}

	@Override
	public List<PrescMedMappingEO> updatePrescriptionAndMedication(List<PrescMedMappingEO> preMeds) {
		List<PrescMedMappingEO> returnedPreMeds = new ArrayList<>();
		for (PrescMedMappingEO prescMedMappingEO : preMeds) {
			PrescriptionDetailEO presc = null;
			MedicationDetailEO med = null;
			if (prescMedMappingEO != null) {
				if (prescMedMappingEO.getPrescriptionDetails() != null) {
					if (prescMedMappingEO.getPrescriptionDetails().getPatient() != null) {
						PatientEO patient = addPatient(prescMedMappingEO.getPrescriptionDetails().getPatient());
						prescMedMappingEO.getPrescriptionDetails().setPatient(patient);
						presc = prescRepo.save(prescMedMappingEO.getPrescriptionDetails());
						prescMedMappingEO.setPrescriptionDetails(presc);
						if (prescMedMappingEO.getMedicationDetails() != null) {
							if (prescMedMappingEO.getMedicationDetails().getPharmacies() != null) {
								try {
									PharmacieSEO pharm = pharmRepo.findById(
											prescMedMappingEO.getMedicationDetails().getPharmacies().getPharmacyId())
											.get();
									med = medRepo.save(prescMedMappingEO.getMedicationDetails());
									prescMedMappingEO.setMedicationDetails(med);
									PrescMedMappingEO preMed = prescMedRepo.save(prescMedMappingEO);
									if (preMed != null)
										returnedPreMeds.add(preMed);
									else
										returnedPreMeds.add(new PrescMedMappingEO());
								} catch (Exception ex) {
									ex.printStackTrace();
								}
							}
						}
					}
				}
			}
		}
		return returnedPreMeds;
	}

	@Override
	public RefillRequestEO updateRequest(RefillRequestEO refillRequestEO) {
		return refillRepo.save(refillRequestEO);
	}

	@Override
	public List<RefillRequestEO> fetchAllRequests() {
		return refillRepo.findAll();
	}

	@Override
	public RemainderEO setRemainder(RemainderEO remainderEO) {
		return remRepo.save(remainderEO);
	}

	@Override
	public List<HospitalEO> fetchAllHospitals() {
		return hospitalRepo.findAll();
	}

	@Override
	public List<DoctorEO> fetchAllDoctors() {
		return drRepo.findAll();
	}

}
